// Generated by CoffeeScript 1.8.0
var Mock, MockClass, mockery, _,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

_ = require('underscore');

mockery = require('mockery');

Mock = (function() {
  function Mock(functions) {
    var fn, _i, _len;
    if (!(functions instanceof Array)) {
      functions = [functions];
    }
    this.callsLog = {};
    this.functions = {};
    for (_i = 0, _len = functions.length; _i < _len; _i++) {
      fn = functions[_i];
      if (typeof fn === "string") {
        fn = {
          name: fn
        };
      }
      this.addFunction(fn.name, fn);
    }
  }

  Mock.prototype.addFunction = function(fnName, fnDesc) {
    if (fnDesc == null) {
      fnDesc = {};
    }
    this.functions[fnName] = fnDesc;
    this.callsLog[fnName] = 0;
    return this[fnName] = function() {
      return this.callMock(fnName, arguments);
    };
  };

  Mock.prototype.modify = function(name, settings) {
    return this.functions[name] = _.extend(this.functions[name], settings);
  };

  Mock.prototype.callMock = function(name, args) {
    if (this.functions[name].takes) {
      this.checkArgs(this.functions[name].takes, _.values(args));
    }
    this.callsLog[name] += 1;
    if (isNaN(this.callsLog[name])) {
      this.callsLog[name] = 1;
    }
    if (this.functions[name].calls != null) {
      if (typeof args[this.functions[name].calls] !== 'function') {
        throw new Error("Expected " + (this.functions[name].calls + 1) + "th argument to be function");
      }
      args[this.functions[name].calls].apply(this, this.functions[name]["with"]);
    }
    if (this.functions[name].returns != null) {
      return this.functions[name].returns;
    }
  };

  Mock.prototype.checkArgs = function(expected, actual) {
    var idx, matching;
    matching = true;
    if (typeof expected === "function") {
      matching = expected(actual);
    } else {
      for (idx in expected) {
        if (typeof expected[idx] !== typeof actual[idx]) {
          matching = false;
        }
        if (typeof expected[idx] !== 'function') {
          matching = _.isEqual(expected[idx], actual[idx]);
        }
        if (!matching) {
          break;
        }
      }
    }
    if (!matching) {
      throw new Error("Mock called with unexpected args");
    }
  };

  Mock.prototype.isCalled = function(name) {
    return this.callsLog[name] > 0;
  };

  Mock.prototype.getCallCount = function(name) {
    return this.callsLog[name];
  };

  Mock.prototype.reset = function() {
    return this.callsLog = {};
  };

  return Mock;

})();

MockClass = (function() {
  function MockClass(functions) {
    this.constructorFn = __bind(this.constructorFn, this);
    if (!(functions instanceof Array)) {
      functions = [functions];
    }
    functions.push('constructor');
    this.mock = new Mock(functions);
    this.instanceCnt = 0;
  }

  MockClass.prototype.constructorFn = function() {
    this.mock.callMock('constructor', _.values(arguments));
    this.instanceCnt++;
    return this.mock;
  };

  MockClass.prototype.isInstantiated = function() {
    return this.instanceCnt > 0;
  };

  MockClass.prototype.getNoInstances = function() {
    return this.instanceCnt;
  };

  MockClass.prototype.addFunction = function(fnName, fnDesc) {
    if (fnDesc == null) {
      fnDesc = {};
    }
    return this.mock.addFunction(fnName, fnDesc);
  };

  MockClass.prototype.modify = function(name, settings) {
    return this.mock.modify(name, settings);
  };

  MockClass.prototype.isCalled = function(name) {
    return this.mock.isCalled(name);
  };

  MockClass.prototype.getCallCount = function(name) {
    return this.mock.getCallCount(name);
  };

  MockClass.prototype.reset = function() {
    this.instanceCnt = 0;
    return this.mock.reset();
  };

  return MockClass;

})();

global.enableMocks = function() {
  return mockery.enable({
    useCleanCache: true
  });
};

global.disableMocks = function() {
  mockery.deregisterAll();
  return mockery.disable();
};

global.mock = function(functions) {
  return new Mock(functions);
};

global.mockFor = function(module, functions) {
  var mock;
  mock = new Mock(functions);
  return mockery.registerMock(module, mock);
};

global.mockClass = function(functions) {
  return new MockClass(functions);
};

global.mockClassFor = function(module, functions) {
  var mock;
  mock = new MockClass(functions);
  return mockery.registerMock(module, mock);
};
